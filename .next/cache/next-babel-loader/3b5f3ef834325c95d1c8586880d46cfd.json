{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\agust\\\\OneDrive\\\\Escritorio\\\\Web Bos Courses\\\\Advanced-React-master\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\";\nimport { useQuery, useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport DisplayError from './ErrorMessage';\nimport useForm from '../lib/useForm';\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    UpdateProduct(\n      id: id\n      data: { id: $id, name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  // 1. We need to get the existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this); // 2. We need to get the mutation to update the product\n\n  const [UpdateProduct, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id // TODO: Pass in updatos to product here\n\n    }\n  }); // 2.1 Create state for the form inputs\n\n  const {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  } = useForm(data.Product); // 3. We need the form to handle the updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault(); // Submit the input fields to the backend\n      // const res = await createProduct();\n      // clearForm();\n      // // Go to that product's page\n      // Router.push({\n      //   pathname: `/product/${res.data.createProduct.id}`,\n      // });\n      // TODO: Handle Submit\n    },\n    children: [/*#__PURE__*/_jsxDEV(DisplayError, {\n      error: error || updateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"Price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/agust/OneDrive/Escritorio/Web Bos Courses/Advanced-React-master/sick-fits/frontend/components/UpdateProduct.js"],"names":["useQuery","useMutation","gql","Router","Form","DisplayError","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","updateData","updateError","updateLoading","inputs","handleChange","resetForm","clearForm","Product","e","preventDefault","name","price","description"],"mappings":"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","sourcesContent":["import { useQuery, useMutation } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\nimport Router from 'next/router';\r\nimport Form from './styles/Form';\r\nimport DisplayError from './ErrorMessage';\r\nimport useForm from '../lib/useForm';\r\n\r\nconst SINGLE_PRODUCT_QUERY = gql`\r\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\r\n    Product(where: { id: $id }) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_PRODUCT_MUTATION = gql`\r\n  mutation UPDATE_PRODUCT_MUTATION(\r\n    $id: ID!\r\n    $name: String\r\n    $description: String\r\n    $price: Int\r\n  ) {\r\n    UpdateProduct(\r\n      id: id\r\n      data: { id: $id, name: $name, description: $description, price: $price }\r\n    ) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function UpdateProduct({ id }) {\r\n  // 1. We need to get the existing product\r\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n    variables: { id },\r\n  });\r\n  if (loading) return <p>Loading...</p>;\r\n  // 2. We need to get the mutation to update the product\r\n  const [\r\n    UpdateProduct,\r\n    { data: updateData, error: updateError, loading: updateLoading },\r\n  ] = useMutation(UPDATE_PRODUCT_MUTATION, {\r\n    variables: {\r\n      id,\r\n      // TODO: Pass in updatos to product here\r\n    },\r\n  });\r\n  // 2.1 Create state for the form inputs\r\n  const { inputs, handleChange, resetForm, clearForm } = useForm(data.Product);\r\n  // 3. We need the form to handle the updates\r\n  return (\r\n    <Form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        // Submit the input fields to the backend\r\n        // const res = await createProduct();\r\n        // clearForm();\r\n        // // Go to that product's page\r\n        // Router.push({\r\n        //   pathname: `/product/${res.data.createProduct.id}`,\r\n        // });\r\n        // TODO: Handle Submit\r\n      }}\r\n    >\r\n      <DisplayError error={error || updateError} />\r\n      <fieldset disabled={updateLoading} aria-busy={updateLoading}>\r\n        <label htmlFor=\"name\">\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"Name\"\r\n            value={inputs.name}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"price\">\r\n          Price\r\n          <input\r\n            type=\"number\"\r\n            id=\"price\"\r\n            name=\"price\"\r\n            placeholder=\"Price\"\r\n            value={inputs.price}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"description\">\r\n          Description\r\n          <textarea\r\n            id=\"description\"\r\n            name=\"description\"\r\n            placeholder=\"Description\"\r\n            value={inputs.description}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Update Product</button>\r\n      </fieldset>\r\n    </Form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}