{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\agust\\\\OneDrive\\\\Escritorio\\\\Web Bos Courses\\\\Advanced-React-master\\\\sick-fits\\\\frontend\\\\components\\\\Search.js\";\nimport { useLazyQuery } from '@apollo/client';\nimport { resetIdCounter, useCombobox } from 'downshift';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { useRouter } from 'next/dist/client/router';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nconst SEARCH_PRODUCTS_QUERY = gql`\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n    searchTerms: allProducts(\n      where: {\n        OR: [\n          { name_contains_i: $searchTerm }\n          { description_contains_i: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      name\n      photo {\n        image {\n          publicUrlTransformed\n        }\n      }\n    }\n  }\n`;\nexport default function Search() {\n  const router = useRouter();\n  const [findItems, {\n    loading,\n    data,\n    error\n  }] = useLazyQuery(SEARCH_PRODUCTS_QUERY, {\n    fetchPolicy: 'no-cache'\n  });\n  const items = (data === null || data === void 0 ? void 0 : data.searchTerms) || [];\n  const findItemsButChill = debounce(findItems, 350);\n  resetIdCounter();\n  const {\n    inputValue,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getItemProps,\n    highlightedIndex,\n    isOpen\n  } = useCombobox({\n    items,\n\n    onInputValueChange() {\n      findItemsButChill({\n        variables: {\n          searchTerm: inputValue\n        }\n      });\n    },\n\n    onSelectedItemChange({\n      selectedItem\n    }) {\n      router.push({\n        pathname: `/product/${selectedItem.id}`\n      });\n    },\n\n    itemToString: item => (item === null || item === void 0 ? void 0 : item.name) || ''\n  });\n  return /*#__PURE__*/_jsxDEV(SearchStyles, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/agust/OneDrive/Escritorio/Web Bos Courses/Advanced-React-master/sick-fits/frontend/components/Search.js"],"names":["useLazyQuery","resetIdCounter","useCombobox","gql","debounce","useRouter","DropDown","DropDownItem","SearchStyles","SEARCH_PRODUCTS_QUERY","Search","router","findItems","loading","data","error","fetchPolicy","items","searchTerms","findItemsButChill","inputValue","getMenuProps","getInputProps","getComboboxProps","getItemProps","highlightedIndex","isOpen","onInputValueChange","variables","searchTerm","onSelectedItemChange","selectedItem","push","pathname","id","itemToString","item","name"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,QAAqD,mBAArD;AAEA,MAAMC,qBAAqB,GAAGN,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;AAqBA,eAAe,SAASO,MAAT,GAAkB;AAC/B,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAM,CAACO,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,GAAZ,IAAwCf,YAAY,CACxDS,qBADwD,EAExD;AACEO,IAAAA,WAAW,EAAE;AADf,GAFwD,CAA1D;AAMA,QAAMC,KAAK,GAAG,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEI,WAAN,KAAqB,EAAnC;AACA,QAAMC,iBAAiB,GAAGf,QAAQ,CAACQ,SAAD,EAAY,GAAZ,CAAlC;AACAX,EAAAA,cAAc;AACd,QAAM;AACJmB,IAAAA,UADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,YALI;AAMJC,IAAAA,gBANI;AAOJC,IAAAA;AAPI,MAQFxB,WAAW,CAAC;AACde,IAAAA,KADc;;AAEdU,IAAAA,kBAAkB,GAAG;AACnBR,MAAAA,iBAAiB,CAAC;AAChBS,QAAAA,SAAS,EAAE;AACTC,UAAAA,UAAU,EAAET;AADH;AADK,OAAD,CAAjB;AAKD,KARa;;AASdU,IAAAA,oBAAoB,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAmB;AACrCpB,MAAAA,MAAM,CAACqB,IAAP,CAAY;AACVC,QAAAA,QAAQ,EAAG,YAAWF,YAAY,CAACG,EAAG;AAD5B,OAAZ;AAGD,KAba;;AAcdC,IAAAA,YAAY,EAAGC,IAAD,IAAU,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,IAAN,KAAc;AAdxB,GAAD,CARf;AAwBA,sBACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD","sourcesContent":["import { useLazyQuery } from '@apollo/client';\r\nimport { resetIdCounter, useCombobox } from 'downshift';\r\nimport gql from 'graphql-tag';\r\nimport debounce from 'lodash.debounce';\r\nimport { useRouter } from 'next/dist/client/router';\r\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\r\n\r\nconst SEARCH_PRODUCTS_QUERY = gql`\r\n  query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\r\n    searchTerms: allProducts(\r\n      where: {\r\n        OR: [\r\n          { name_contains_i: $searchTerm }\r\n          { description_contains_i: $searchTerm }\r\n        ]\r\n      }\r\n    ) {\r\n      id\r\n      name\r\n      photo {\r\n        image {\r\n          publicUrlTransformed\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Search() {\r\n  const router = useRouter();\r\n  const [findItems, { loading, data, error }] = useLazyQuery(\r\n    SEARCH_PRODUCTS_QUERY,\r\n    {\r\n      fetchPolicy: 'no-cache',\r\n    }\r\n  );\r\n  const items = data?.searchTerms || [];\r\n  const findItemsButChill = debounce(findItems, 350);\r\n  resetIdCounter();\r\n  const {\r\n    inputValue,\r\n    getMenuProps,\r\n    getInputProps,\r\n    getComboboxProps,\r\n    getItemProps,\r\n    highlightedIndex,\r\n    isOpen,\r\n  } = useCombobox({\r\n    items,\r\n    onInputValueChange() {\r\n      findItemsButChill({\r\n        variables: {\r\n          searchTerm: inputValue,\r\n        },\r\n      });\r\n    },\r\n    onSelectedItemChange({ selectedItem }) {\r\n      router.push({\r\n        pathname: `/product/${selectedItem.id}`,\r\n      });\r\n    },\r\n    itemToString: (item) => item?.name || '',\r\n  });\r\n  return (\r\n    <SearchStyles>\r\n      {/* <div {...getComboboxProps()}>\r\n        <input\r\n          {...getInputProps({\r\n            type: 'search',\r\n            placeholder: 'Search for an Item',\r\n            id: 'search',\r\n            className: loading ? 'loading' : '',\r\n          })}\r\n        />\r\n      </div>\r\n      <DropDown {...getMenuProps()}>\r\n        {isOpen &&\r\n          items.map((item, index) => (\r\n            <DropDownItem\r\n              key={item.id}\r\n              {...getItemProps({ item })}\r\n              highlighted={index === highlightedIndex}\r\n            >\r\n              <img\r\n                src={item.photo.image.publicUrlTransformed}\r\n                alt={item.name}\r\n                width=\"50px\"\r\n              />\r\n              {item.name}\r\n            </DropDownItem>\r\n          ))}\r\n        {isOpen && !items.length && !loading && (\r\n          <DropDownItem>Sorry, No items found for {inputValue}</DropDownItem>\r\n        )}\r\n      </DropDown> */}\r\n    </SearchStyles>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}