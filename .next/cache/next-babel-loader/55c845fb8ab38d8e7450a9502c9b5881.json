{"ast":null,"code":"// import { useLazyQuery } from '@apollo/client';\n// import { resetIdCounter, useCombobox } from 'downshift';\n// import gql from 'graphql-tag';\n// import debounce from 'lodash.debounce';\n// import { useRouter } from 'next/dist/client/router';\n// import { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n// const SEARCH_PRODUCTS_QUERY = gql`\n//   query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\n//     searchTerms: allProducts(\n//       where: {\n//         OR: [\n//           { name_contains_i: $searchTerm }\n//           { description_contains_i: $searchTerm }\n//         ]\n//       }\n//     ) {\n//       id\n//       name\n//       photo {\n//         image {\n//           publicUrlTransformed\n//         }\n//       }\n//     }\n//   }\n// `;\n// export default function Search() {\n//   const router = useRouter();\n//   const [findItems, { loading, data, error }] = useLazyQuery(\n//     SEARCH_PRODUCTS_QUERY,\n//     {\n//       fetchPolicy: 'no-cache',\n//     }\n//   );\n//   const items = data?.searchTerms || [];\n//   const findItemsButChill = debounce(findItems, 350);\n//   resetIdCounter();\n//   const {\n//     inputValue,\n//     getMenuProps,\n//     getInputProps,\n//     getComboboxProps,\n//     getItemProps,\n//     highlightedIndex,\n//     isOpen,\n//   } = useCombobox({\n//     items,\n//     onInputValueChange() {\n//       findItemsButChill({\n//         variables: {\n//           searchTerm: inputValue,\n//         },\n//       });\n//     },\n//     onSelectedItemChange({ selectedItem }) {\n//       router.push({\n//         pathname: `/product/${selectedItem.id}`,\n//       });\n//     },\n//     itemToString: (item) => item?.name || '',\n//   });\n//   return (\n//     <SearchStyles>\n//       <div {...getComboboxProps()}>\n//         <input\n//           {...getInputProps({\n//             type: 'search',\n//             placeholder: 'Search for an Item',\n//             id: 'search',\n//             className: loading ? 'loading' : '',\n//           })}\n//         />\n//       </div>\n//       <DropDown {...getMenuProps()}>\n//         {isOpen &&\n//           items.map((item, index) => (\n//             <DropDownItem\n//               key={item.id}\n//               {...getItemProps({ item })}\n//               highlighted={index === highlightedIndex}\n//             >\n//               <img\n//                 src={item.photo.image.publicUrlTransformed}\n//                 alt={item.name}\n//                 width=\"50px\"\n//               />\n//               {item.name}\n//             </DropDownItem>\n//           ))}\n//         {isOpen && !items.length && !loading && (\n//           <DropDownItem>Sorry, No items found for {inputValue}</DropDownItem>\n//         )}\n//       </DropDown>\n//     </SearchStyles>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/agust/OneDrive/Escritorio/Web Bos Courses/Advanced-React-master/sick-fits/frontend/components/Search.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { useLazyQuery } from '@apollo/client';\r\n// import { resetIdCounter, useCombobox } from 'downshift';\r\n// import gql from 'graphql-tag';\r\n// import debounce from 'lodash.debounce';\r\n// import { useRouter } from 'next/dist/client/router';\r\n// import { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\r\n\r\n// const SEARCH_PRODUCTS_QUERY = gql`\r\n//   query SEARCH_PRODUCTS_QUERY($searchTerm: String!) {\r\n//     searchTerms: allProducts(\r\n//       where: {\r\n//         OR: [\r\n//           { name_contains_i: $searchTerm }\r\n//           { description_contains_i: $searchTerm }\r\n//         ]\r\n//       }\r\n//     ) {\r\n//       id\r\n//       name\r\n//       photo {\r\n//         image {\r\n//           publicUrlTransformed\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// export default function Search() {\r\n//   const router = useRouter();\r\n//   const [findItems, { loading, data, error }] = useLazyQuery(\r\n//     SEARCH_PRODUCTS_QUERY,\r\n//     {\r\n//       fetchPolicy: 'no-cache',\r\n//     }\r\n//   );\r\n//   const items = data?.searchTerms || [];\r\n//   const findItemsButChill = debounce(findItems, 350);\r\n//   resetIdCounter();\r\n//   const {\r\n//     inputValue,\r\n//     getMenuProps,\r\n//     getInputProps,\r\n//     getComboboxProps,\r\n//     getItemProps,\r\n//     highlightedIndex,\r\n//     isOpen,\r\n//   } = useCombobox({\r\n//     items,\r\n//     onInputValueChange() {\r\n//       findItemsButChill({\r\n//         variables: {\r\n//           searchTerm: inputValue,\r\n//         },\r\n//       });\r\n//     },\r\n//     onSelectedItemChange({ selectedItem }) {\r\n//       router.push({\r\n//         pathname: `/product/${selectedItem.id}`,\r\n//       });\r\n//     },\r\n//     itemToString: (item) => item?.name || '',\r\n//   });\r\n//   return (\r\n//     <SearchStyles>\r\n//       <div {...getComboboxProps()}>\r\n//         <input\r\n//           {...getInputProps({\r\n//             type: 'search',\r\n//             placeholder: 'Search for an Item',\r\n//             id: 'search',\r\n//             className: loading ? 'loading' : '',\r\n//           })}\r\n//         />\r\n//       </div>\r\n//       <DropDown {...getMenuProps()}>\r\n//         {isOpen &&\r\n//           items.map((item, index) => (\r\n//             <DropDownItem\r\n//               key={item.id}\r\n//               {...getItemProps({ item })}\r\n//               highlighted={index === highlightedIndex}\r\n//             >\r\n//               <img\r\n//                 src={item.photo.image.publicUrlTransformed}\r\n//                 alt={item.name}\r\n//                 width=\"50px\"\r\n//               />\r\n//               {item.name}\r\n//             </DropDownItem>\r\n//           ))}\r\n//         {isOpen && !items.length && !loading && (\r\n//           <DropDownItem>Sorry, No items found for {inputValue}</DropDownItem>\r\n//         )}\r\n//       </DropDown>\r\n//     </SearchStyles>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"script"}